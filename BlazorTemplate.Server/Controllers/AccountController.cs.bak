using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;

using BlazorTemplate.Shared.Entities.Commands;
using BlazorTemplate.Server.Services;
using BlazorTemplate.Server.SharedServices;

namespace BlazorTemplate.Server.Controllers
{
    [Produces("application/json")]
    [Route("[controller]")]
    [ApiController]
    //[AutoValidateAntiforgeryToken]    
    public class AccountController : ControllerBase
    {
        private AccountService AccountService { get; set; }
        private SpamBlockSharedService SpamBlockService { get; set; }

        public AccountController(AccountService accountService, SpamBlockSharedService spamBlockSharedService)
        {
            AccountService = accountService;
            SpamBlockService = spamBlockSharedService;
        }

        [HttpGet]
        public IActionResult Controller()
        {
            return LocalRedirect("/");
        }
        
        [HttpPost("[action]")]
        [AllowAnonymous]
        //[ValidateAntiForgeryToken]
        public async Task<IActionResult> Register([FromBody]RegisterCommand command) 
        {
            // Cookie認証によるセッションチェック
            var loginResult = HttpContext.AuthenticateAsync().Result.Succeeded;
            if(loginResult) return BadRequest(new RegisterCommandResult(null, new List<string>() { "ログイン中は登録できません。" }));

            // モデルの検証
            if (!ModelState.IsValid)
            {
                // 仕様に合わせたエラーメッセージの作成
                List<string> errors = new List<string>();
                foreach(var values in ModelState.Values)
                {
                    errors.AddRange(values.Errors.Select( e => e.ErrorMessage));
                }
                return BadRequest(new RegisterCommandResult(null, errors));
            }

            // リモートIPの取得
            var userIp = HttpContext.Connection.RemoteIpAddress.ToString();

            // BANされていた場合   
            if (SpamBlockService.IsRejected(userIp))
            {
                return BadRequest(new RegisterCommandResult(null, new List<string>() { "新規登録はできません。BANされています。" }));
            }

            // BANされてないが、何度も登録してくる場合
            if (SpamBlockService.IsRegistered(userIp))
            {
                SpamBlockService.AddOrUpdate(userIp);
                return BadRequest
                (
                    new RegisterCommandResult(null, new List<string>() { $"{SpamBlockService.MonitorTime}秒後にもう一度お試しください。" +
                                                    $"[{SpamBlockService.GetBlockCount(userIp)}/{SpamBlockService.AllowableCount}]" })
                );
            }

            (IdentityResult result, string password) = await AccountService.Register(command.UserName);

            if (!result.Succeeded) return BadRequest(new RegisterCommandResult(null, result.Errors.Select(s => s.Description).ToList()));

            SpamBlockService.AddOrUpdate(userIp);

            return Ok( new RegisterCommandResult(password, null) );
        }
        
        [HttpPost("login")]
        [AllowAnonymous]
        //[ValidateAntiForgeryToken]
        public async Task<IActionResult> Login([FromBody]LoginCommand command)
        {
            // Cookie認証によるセッションチェック
            var cookieLoginResult = HttpContext.AuthenticateAsync().Result.Succeeded;
            if (cookieLoginResult) return BadRequest(new LoginCommandResult(false, new List<string>() { "既にログインしています。" }));

            // モデルの検証
            if (!ModelState.IsValid)
            {
                // 仕様に合わせたエラーメッセージの作成
                List<string> errors = new List<string>();
                foreach (var values in ModelState.Values)
                {
                    errors.AddRange(values.Errors.Select(e => e.ErrorMessage));
                }
                return BadRequest(new LoginCommandResult(false, errors));
            }

            var result = await AccountService.Login(command.UserName, command.Password);

            if (!result.Succeeded)
            {
                if (result.IsLockedOut) return BadRequest(new LoginCommandResult(false, new List<string>() { "ロックアウトされています。" }));
                if (result.IsNotAllowed) return BadRequest(new LoginCommandResult(false, new List<string>() { "ログインは許可されていません。" }));

                return BadRequest(new LoginCommandResult(false, new List<string>() { "ログインに失敗しました。" }));
            }

            return Ok(new LoginCommandResult(true, null));
        }

        [HttpPost("logout")]
        [AllowAnonymous]
        //[ValidateAntiForgeryToken]
        public async Task<IActionResult> PostLogout()
        {
            // モデルの検証
            //if (!ModelState.IsValid) return BadRequest(ModelState);

            await AccountService.Logout();

            return Ok(new LogoutCommandResult(true));
        }
        [HttpGet("logout")]
        [AllowAnonymous]
        public IActionResult GetLogout() => BadRequest(new LogoutCommandResult(false));

        [HttpGet("validatecookie")]
        [AllowAnonymous]
        public async Task<IActionResult> ValidateCookie()
        {
            var result = await HttpContext.AuthenticateAsync();

            if(!result.Succeeded) return Ok(new ValidateCookieCommandResult(false));

            return Ok(new ValidateCookieCommandResult(true));
        }

        [HttpGet("validate")]
        [AllowAnonymous]
        public async Task<IActionResult> Validate()
        {
            var isAvailableCookie = await HttpContext.AuthenticateAsync();
            if (!isAvailableCookie.Succeeded) return Ok( new ValidateCommandResult(false) );

            var isAvailable = await AccountService.UserExists(HttpContext.User.Identity.Name);
            if (!isAvailable) return Ok(new ValidateCommandResult(false));

            return Ok(new ValidateCommandResult(true));
        }

        [HttpGet("userinfo")]
        [Authorize]
        public async Task<IActionResult> UserInfo()
        {
               var user = await AccountService.GetUser(HttpContext.User.Identity.Name);
            if (user == null) return BadRequest();

            return Ok( new UserInfomationCommandResult(user.Name));
        }
    }
}
