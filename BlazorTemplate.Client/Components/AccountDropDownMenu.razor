@inject SessionService SessionService
@inject AccountService AccountService
@inject AvatarService AvatarService
@inject NavigationManager NavigationManager
@implements IDisposable

@using Sotsera.Blazor.Toaster
@using Microsoft.AspNetCore.Components.Authorization


@switch (SessionState)
{
    default:
    case SessionState.LoggedOut:
    case SessionState.LogInError:
        <ul class="nav navbar-nav ml-auto">
            <li class="nav-item px-3">
                <a class="nav-link" href="./login">ログイン</a>
            </li>
        </ul>
        break;

    case SessionState.LoggingIn:
        <ul class="nav navbar-nav ml-auto">
            <li class="nav-item px-3">
                認証中...
            </li>
        </ul>
        break;
    case SessionState.LoggedIn:
        <ul class="nav navbar-nav ml-auto">
            <li class="nav-item dropdown">
                <button class="nav-link" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
                    <MyAvatarSmall />
                </button>
                <div class="dropdown-menu dropdown-menu-right">
                    <div class="dropdown-header">
                        <h5>@UserName</h5>
                    </div>

                    <a class="dropdown-item" @onclick="Click_logout">
                        <i class="icon-logout"></i> ログアウト
                    </a>

                </div>
            </li>
        </ul>
        break;
}

@code
{
    SessionState SessionState { get; set; } = SessionState.LoggedOut;
    string UserName { get; set; } = string.Empty;
    string Avatar { get; set; } = string.Empty;

    [Inject]
    protected IToaster Toaster { get; set; }

    protected async Task Click_logout()
    {
        await SessionService.LogoutAsync();
        await AccountService.GetUserInfomationAsync();
        await AvatarService.GetMyAvatarAsync();

        NavigationManager.NavigateTo("/logout");
        StateHasChanged();
    }

    protected override Task OnInitializedAsync()
    {
        AccountService.UserNameChanged += OnUserNameChanged;
        AvatarService.AvatarChanged += OnAvatarChanged;
        SessionService.StateChanged += OnSessionStateChanged;

        return base.OnInitializedAsync();
    }

    protected void OnUserNameChanged(object sender, string username)
    {
        UserName = username;
        StateHasChanged();
    }

    protected void OnAvatarChanged(object sender, string avatar)
    {
        Avatar = avatar;
        StateHasChanged();
    }

    protected void OnSessionStateChanged(SessionState state)
    {
        SessionState = state;
        StateHasChanged();
    }

    public void Dispose()
    {
        AccountService.UserNameChanged -= OnUserNameChanged;
        AvatarService.AvatarChanged -= OnAvatarChanged;
        SessionService.StateChanged -= OnSessionStateChanged;
    }
}
